services:

  # NGINX
  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    networks:
      - nginx
    depends_on:
      - api-gateway


  # ELK STACK
  elasticsearch:
    image: elasticsearch:7.17.22
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${ELASTICSEARCH_PORT}/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - elk-stack

  logstash:
    image: logstash:7.17.22
    container_name: logstash
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "${LOGSTASH_PORT}:${LOGSTASH_PORT}/tcp"
      - "${LOGSTASH_HEALTH_CHECK_PORT}:${LOGSTASH_HEALTH_CHECK_PORT}"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${LOGSTASH_HEALTH_CHECK_PORT}/_node/pipelines || exit 1" ]
      interval: 10s
      retries: 15
      start_period: 30s
      timeout: 10s
    networks:
      - elk-stack
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: kibana:7.17.22
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:${ELASTICSEARCH_PORT}"]'
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    networks:
      - elk-stack
    depends_on:
      elasticsearch:
        condition: service_healthy


  # REDIS
  redis:
    container_name: redis
    image: redis:alpine
    volumes:
      - ./redis:/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: --port ${REDIS_PORT}
    networks:
      - redis
    restart: always


  # RABBITMQ
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:alpine
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
    networks:
      - rabbitmq
    restart: always


  # ZIPKIN
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "${ZIPKIN_PORT}:${ZIPKIN_PORT}"
    networks:
      - zipkin
    restart: always


  # POSTGRES DATABASES
  postgres-auth:
    container_name: postgres-auth
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emirhan
      POSTGRES_DB: auth-service
    ports:
      - "${POSTGRES_AUTH_PORT}:${POSTGRES_AUTH_PORT}"
    command: -p ${POSTGRES_AUTH_PORT}
    networks:
      - postgres
    restart: always

  postgres-user:
    container_name: postgres-user
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emirhan
      POSTGRES_DB: user-service
    ports:
      - "${POSTGRES_USER_PORT}:${POSTGRES_USER_PORT}"
    command: -p ${POSTGRES_USER_PORT}
    networks:
      - postgres
    restart: always

  postgres-product:
    container_name: postgres-product
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emirhan
      POSTGRES_DB: product-service
    ports:
      - "${POSTGRES_PRODUCT_PORT}:${POSTGRES_PRODUCT_PORT}"
    command: -p ${POSTGRES_PRODUCT_PORT}
    networks:
      - postgres
    restart: always

  postgres-sale:
    container_name: postgres-sale
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emirhan
      POSTGRES_DB: sale-service
    ports:
      - "${POSTGRES_SALE_PORT}:${POSTGRES_SALE_PORT}"
    command: -p ${POSTGRES_SALE_PORT}
    networks:
      - postgres
    restart: always


  # MAIN SERVICES
  service-registry:
    container_name: service-registry
    image: emirhantuygun/service-registry:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "${SERVICE_REGISTRY_PORT}:${SERVICE_REGISTRY_PORT}"
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - zipkin
    depends_on:
      logstash:
        condition: service_healthy
      zipkin:
        condition: service_started

  api-gateway:
    container_name: api-gateway
    image: emirhantuygun/api-gateway:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    expose:
      - "${API_GATEWAY_PORT}"
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - redis
      - zipkin
      - nginx
    depends_on:
      - service-registry
      - redis

  auth-service:
    container_name: auth-service
    image: emirhantuygun/auth-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - postgres
      - redis
      - rabbitmq
      - zipkin
    depends_on:
      - api-gateway
      - rabbitmq
      - postgres-auth

  user-service:
    container_name: user-service
    image: emirhantuygun/user-management-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - postgres
      - rabbitmq
      - zipkin
    depends_on:
      - api-gateway
      - auth-service
      - postgres-user

  product-service:
    container_name: product-service
    image: emirhantuygun/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SEND_EMAIL=${SEND_EMAIL}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_RECIPIENT=${EMAIL_RECIPIENT}
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - postgres
      - redis
      - rabbitmq
      - zipkin
    depends_on:
      - api-gateway
      - postgres-product
      - rabbitmq

  sale-service:
    container_name: sale-service
    image: emirhantuygun/sale-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - postgres
      - rabbitmq
      - zipkin
    depends_on:
      - api-gateway
      - product-service
      - postgres-sale

  report-service:
    container_name: report-service
    image: emirhantuygun/report-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_ACTIVE=${GEMINI_ACTIVE}
    volumes:
      - ./logs:/logs
    networks:
      - elk-stack
      - registry
      - zipkin
    depends_on:
      - api-gateway
      - sale-service

networks:
  elk-stack:
  postgres:
  registry:
  redis:
  rabbitmq:
  zipkin:
  nginx:


